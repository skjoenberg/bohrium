/**********************************************************
 * Do not edit this file. It has been auto generated by   *
 * ../core/codegen/gen_extmethod.py at @!timestamp!@.  *
 **********************************************************/
#include <bh_extmethod.hpp>
#include <bh_main_memory.hpp>

#if defined(__APPLE__) || defined(__MACOSX)
    #include <Accelerate/Accelerate.h>
    #define LAPACK_FUN(op) op##_
#else
    #include <lapacke.h>
    #define LAPACK_FUN(op) LAPACK_##op
#endif

#include <stdexcept>
#include <algorithm>

using namespace bohrium;
using namespace extmethod;
using namespace std;

namespace {
    template<typename T>
    T* get_ap_data(T* tmp_data, int n) {
        T* AP_data = new T[n*(n+1)/2];

        int k = 0;
        for(int j = 0; j < n; ++j) {
            for(int i = 0; i <= j; ++i) {
                AP_data[k] = tmp_data[i + j*n];
                ++k;
            }
        }

        return AP_data;
    }

    template<typename T>
    T* get_ab_data(T* tmp_data, int n, int m, int kl, int ku) {
        int ldab = 2 * kl + ku + 1;
        T* AB_data = new T[ldab * n];

        for(int i = 0; i < m; ++i) {
            for(int j = max(0, i-kl); j <= min(n-1, i+ku); ++j) {
                AB_data[(kl + ku + i - j)*n + j] = tmp_data[i*n + j];
            }
        }

        // Transpose AB_data
        T* tAB_data = new T[ldab * n];
        for(int i = 0; i < ldab; ++i) {
            for(int j = 0; j < n; ++j) {
                tAB_data[j*ldab + i] = AB_data[i*n + j];
            }
        }

        return tAB_data;
    }

    template<typename T>
    int calc_ku(void* data, int xdim) {
        T* tmpdata = (T*) data;
        int ku = 0;

        for(int i = 1; i <= xdim; ++i) {
            if(tmpdata[i] == 0) {
                break;
            } else {
                ku++;
            }
        }

        return ku;
    }

    template<typename T>
    int calc_kl(void* data, int xdim, int ydim) {
        T* tmpdata = (T*) data;
        int kl = 0;

        for(int i = 1; i <= ydim; ++i) {
            if(tmpdata[i * xdim] == 0) {
                break;
            } else {
                kl++;
            }
        }

        return kl;
    }

    template<typename T>
    T* get_diagonal(void *data, int n) {
        T* diag = NULL;
        diag = new T[n];

        T* tmpdata = (T*) data;

        for(int i = 0; i < n; ++i) {
            diag[i] = tmpdata[i*n + i];
        }

        return diag;
    }

    template<typename T>
    T* get_subdiagonal(void *data, int n) {
        T* diag = NULL;
        diag = new T[n-1];

        for(int i = 0; i < n-1; ++i) {
            diag[i] = ((T*) data)[(i+1)*n + i];
        }

        return diag;
    }

    template<typename T>
    T* get_superdiagonal(void *data, int n) {
        T* diag = NULL;
        diag = new T[n-1];

        for(int i = 0; i < n-1; ++i) {
            diag[i] = ((T*) data)[i*n + (i+1)];
        }

        return diag;
    }

    @!body!@
} /* end of namespace */

@!footer!@
